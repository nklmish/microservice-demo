buildscript {
    ext {
        springBootVersion = '1.2.4.RELEASE'
        springCloudVersion = '1.0.2.RELEASE'
        groovyVersion = '2.4.3'
        dockerVersion = '1.2'
    }
    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:${dockerVersion}")
    }
}

allprojects {
    apply plugin: 'idea'
    apply plugin: 'eclipse'

    group 'microservicedemo'
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'spring-boot'
    apply plugin: 'docker'

    sourceCompatibility = 1.8
    sourceCompatibility = 1.8

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    jar {
        baseName = project.name
        version = project.version
    }

    dependencies {
        compile "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
        compile "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    }

    docker {
        baseImage = 'java:8'
    }
}

project(':catalog-service') {
    mainClassName = "com.nklmish.cs.catalogs.Application"

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-netflix-hystrix-amqp:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-bus-amqp:${springCloudVersion}"
    }

    distDocker {
        exposePort 8090
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

project(':comment-service') {
    mainClassName = "com.nklmish.cs.comments.Application"

    dependencies {
        compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"
    }

    distDocker {
        exposePort 8090
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

project(':eureka-service') {
    mainClassName = 'com.nklmish.es.Application'

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile ("org.springframework.cloud:spring-cloud-starter-eureka-server:${springCloudVersion}") {
            exclude(module: 'servlet-api')
        }
    }

    distDocker {
        exposePort 8761
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

project(':price-service') {
    mainClassName = "com.nklmish.ps.prices.Application"

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"
    }

    distDocker {
        exposePort 8090
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

project(':product-service') {
    mainClassName = "com.nklmish.ps.products.Application"

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-hystrix:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"
    }

    distDocker {
        exposePort 8090
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

project(':zuul-service') {
    mainClassName = "com.nklmish.zuul.demo.Application"

    dependencies {
        compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-zuul:${springCloudVersion}"
        compile "org.springframework.cloud:spring-cloud-starter-eureka:${springCloudVersion}"
    }

    distDocker {
        exposePort 8765
        setEnvironment 'JAVA_OPTS', '-Dspring.profiles.active=docker'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}